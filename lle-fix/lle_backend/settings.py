"""
Django settings for lle_backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
# Ensure .env is in the same directory as manage.py (BASE_DIR)
dotenv_path = BASE_DIR / '.env'
if dotenv_path.exists():
    load_dotenv(dotenv_path)
else:
    print(f"Warning: .env file not found at {dotenv_path}. Using default settings or environment variables.")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', "django-insecure-h0^3t%i%_%c4a2t$k@t8_l2e62!c*o()rn(+atfhm%ty7=d38h") # Fallback for initial run

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS_STRING = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]
if not ALLOWED_HOSTS: # Ensure ALLOWED_HOSTS is not empty, especially if DJANGO_ALLOWED_HOSTS is not set
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Local apps
    'core.apps.CoreConfig',
    'speech.apps.SpeechConfig',
    'curriculum.apps.CurriculumConfig',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_prometheus',
    'django.contrib.postgres', # For JSONB GIN indexes and other PostgreSQL specific features
    'django_celery_beat',
    # 'axes', # Optional, if login attempt tracking is desired
    'drf_spectacular', # For OpenAPI/Swagger documentation
'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware', # Prometheus: Must be first
    "django.middleware.security.SecurityMiddleware",
    'corsheaders.middleware.CorsMiddleware', # CORS: Before CommonMiddleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 'axes.middleware.AxesMiddleware', # Optional
    'django_prometheus.middleware.PrometheusAfterMiddleware', # Prometheus: Must be last
]

ROOT_URLCONF = "lle_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'], # Optional: project-level templates
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug", # Added debug processor
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "lle_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'lle_db'),
        'USER': os.getenv('POSTGRES_USER', 'lle_user'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'lle_password'),
        'HOST': os.getenv('POSTGRES_HOST', 'db'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
        'CONN_MAX_AGE': os.getenv('POSTGRES_CONN_MAX_AGE', 600), # Built-in connection pooling
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles" # For 'collectstatic' in production

# Media files (User uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Auth User Model (if you ever need a custom user model, define it here)
# AUTH_USER_MODEL = 'core.User' # Example if you create a custom user in 'core' app


# Django REST Framework (DRF) Settings
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Default to requiring authentication
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DATETIME_FORMAT': "%Y-%m-%dT%H:%M:%S%z", # ISO 8601 format
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', # For drf-spectacular
    # Rate limiting (can also be configured per-view)
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '100/day',  # For anonymous users
    #     'user': '1000/day' # For authenticated users
    # }
}

# Simple JWT Settings
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('DJANGO_JWT_ACCESS_TOKEN_LIFETIME_MINUTES', '60'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('DJANGO_JWT_REFRESH_TOKEN_LIFETIME_DAYS', '7'))),
    'ROTATE_REFRESH_TOKENS': True, # When a refresh token is used, a new one is issued
    'BLACKLIST_AFTER_ROTATION': True, # Blacklists the old refresh token
    'UPDATE_LAST_LOGIN': True, # Updates User.last_login field upon successful token refresh

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses Django's SECRET_KEY by default
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # Authorization: Bearer <token>
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Not typically used with access/refresh pairs
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Not typically used
}


# CORS (Cross-Origin Resource Sharing) Settings
# https://github.com/adamchainz/django-cors-headers
CORS_ALLOWED_ORIGINS_STRING = os.getenv('DJANGO_CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ALLOWED_ORIGINS_STRING.split(',') if origin.strip()]
# CORS_ALLOW_ALL_ORIGINS = False # Default, set to True for wide open access (not recommended for production)
CORS_ALLOW_CREDENTIALS = True # Allow cookies to be sent with CORS requests (important for session auth or JWT in cookies)
# Optional: Define specific headers and methods if needed
# CORS_ALLOW_HEADERS = list(default_headers) + ['my-custom-header']
# CORS_ALLOW_METHODS = list(default_methods) + ['PATCH']


# Rate Limiting (django-ratelimit)
# https://django-ratelimit.readthedocs.io/en/stable/
RATELIMIT_ENABLED = True
RATELIMIT_USE_CACHE = 'default' # Uses Django's default cache
RATELIMIT_KEY_PREFIX = 'rl'
RATELIMIT_GROUP_PREFIX = 'rlg'
# Specific rates are defined in `.env.example` and used in views/decorators or global middleware.
# Example global rate limit (applied to all views if middleware is used globally):
# RATELIMIT_GLOBAL = '100/h'


# HTTPS Enforcement Settings (for production behind a reverse proxy like Nginx)
# Ensure your reverse proxy is configured to handle SSL termination and set appropriate headers.
# https://docs.djangoproject.com/en/5.2/topics/security/#ssl-https
SECURE_SSL_REDIRECT = os.getenv('DJANGO_SECURE_SSL_REDIRECT', 'False').lower() == 'true'
SESSION_COOKIE_SECURE = os.getenv('DJANGO_SESSION_COOKIE_SECURE', 'False').lower() == 'true'
CSRF_COOKIE_SECURE = os.getenv('DJANGO_CSRF_COOKIE_SECURE', 'False').lower() == 'true'

# Additional security settings (optional, but recommended for production)
# SECURE_HSTS_SECONDS = 31536000  # 1 year. Enables HTTP Strict Transport Security.
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True
# X_FRAME_OPTIONS = 'DENY' # Default is 'SAMEORIGIN'


# Sentry SDK Setup
# https://docs.sentry.io/platforms/python/guides/django/
SENTRY_DSN = os.getenv('SENTRY_DSN')
if SENTRY_DSN and SENTRY_DSN.strip(): # Ensure DSN is not None and not an empty/whitespace string
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.redis import RedisIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
            RedisIntegration(),
        ],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # Adjust as needed for production.
        traces_sample_rate=float(os.getenv('SENTRY_TRACES_SAMPLE_RATE', '1.0')),
        # Capture 100% of errors by default.
        send_default_pii=True, # If PII is relevant to your error tracking
        environment=os.getenv('SENTRY_ENVIRONMENT', 'development'),
        # You can also add release versioning, etc.
        # release="lle_backend@1.0.0"
    )


# Celery Configuration
# https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html
CELERY_BROKER_URL = f"redis://{os.getenv('REDIS_HOST', 'redis')}:{os.getenv('REDIS_PORT', '6379')}/{os.getenv('REDIS_DB_CELERY_BROKER', '0')}"
CELERY_RESULT_BACKEND = f"redis://{os.getenv('REDIS_HOST', 'redis')}:{os.getenv('REDIS_PORT', '6379')}/{os.getenv('REDIS_DB_CELERY_BROKER', '0')}" # Can be same as broker or different
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60 # Example: 30 minutes time limit for tasks
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Django Prometheus settings (already added to INSTALLED_APPS and MIDDLEWARE)
# No specific settings usually required here unless customizing metrics.
# See: https://github.com/korfuri/django-prometheus

# Caching (using Redis)
# https://docs.djangoproject.com/en/5.2/topics/cache/
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{os.getenv('REDIS_HOST', 'redis')}:{os.getenv('REDIS_PORT', '6379')}/{os.getenv('REDIS_DB_CACHE', '1')}", # Use a different Redis DB for cache
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# LiveKit and Vertex AI SDK settings (placeholders for now, actual usage will be in views)
LIVEKIT_API_KEY = os.getenv('LIVEKIT_API_KEY')
LIVEKIT_API_SECRET = os.getenv('LIVEKIT_API_SECRET')
LIVEKIT_WS_URL = os.getenv('LIVEKIT_WS_URL')

# Google Generative AI SDK Settings
GENAI_API_KEY = os.getenv('GENAI_API_KEY')
GENAI_MODEL_NAME = os.getenv('GENAI_MODEL_NAME', 'gemini-1.5-flash-latest') # Default model


# DRF Spectacular (OpenAPI / Swagger) Settings
# https://drf-spectacular.readthedocs.io/en/latest/settings.html
SPECTACULAR_SETTINGS = {
    'TITLE': 'LLE Backend API',
    'DESCRIPTION': 'API for the Language Learning Environment (LLE) backend, providing services for user management, speech processing, and curriculum generation.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,  # We will serve the schema separately via SpectacularAPIView
    # Optional: Customize schema generation
    # 'SCHEMA_PATH_PREFIX': r'/api/v[0-9]', # Example: if your API is versioned
    'COMPONENT_SPLIT_REQUEST': True, # Split request body parameters into separate components
    'COMPONENT_SPLIT_RESPONSE_HEADERS': True, # Split response headers into separate components
    'SECURITY': [
        {
            'jwtAuth': { # Matches the name used in OpenApiSecurityScheme below (can be any name)
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        }
    ],
    # More settings: https://drf-spectacular.readthedocs.io/en/latest/settings.html
}


# Logging Configuration (Example: basic logging to console)
# For more advanced logging, see: https://docs.djangoproject.com/en/5.2/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Adjust level as needed (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}


# Simple JWT settings

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}