services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: sh -c "cd backend && uv run manage.py makemigrations && uv run manage.py migrate && uv run gunicorn lle_backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app/backend
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lle_db}
      POSTGRES_USER: ${POSTGRES_USER:-lle_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lle_password}
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-lle_user} -d ${POSTGRES_DB:-lle_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run celery -A lle_backend worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run celery -A lle_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: sh -c "npm i && npm run dev"
    volumes:
      - ./frontend:/app
      - ./frontend/node_modules:/app/node_modules
    expose:
      - 3000
    env_file:
      - ./frontend/.env

  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    command: sh -c "uv run /app/agent/agent.py dev"
    volumes:
      - "./agent/agent.py:/app/agent/agent.py"
      - "./agent/pyproject.toml:/app/agent/pyproject.toml"
    env_file:
      - ./agent/.env

  # Email Server (Postfix + Dovecot)
  postfix:
    image: boky/postfix:latest
    environment:
      - ALLOWED_SENDER_DOMAINS=chatai-talk.ir
      - HOSTNAME=mail.chatai-talk.ir
      - POSTFIX_myhostname=mail.chatai-talk.ir
      - POSTFIX_mydomain=chatai-talk.ir
      - POSTFIX_myorigin=chatai-talk.ir
      - POSTFIX_inet_interfaces=all
      - POSTFIX_inet_protocols=ipv4
    ports:
      - "25:587" # SMTP
      - "587:587" # SMTP Submission
    volumes:
      - postfix_data:/var/lib/postfix
      - ./mail/postfix:/etc/postfix/custom.d
    restart: unless-stopped
    networks:
      - mail_network

  dovecot:
    image: dovecot/dovecot:latest
    ports:
      - "993:993" # IMAPS
      - "143:143" # IMAP
    volumes:
      - dovecot_data:/var/lib/dovecot
      - mail_data:/var/mail
      - ./mail/dovecot:/etc/dovecot/conf.d/custom
    environment:
      - DOVECOT_HOSTNAME=mail.chatai-talk.ir
    restart: unless-stopped
    networks:
      - mail_network

  # Roundcube Webmail
  roundcube:
    image: roundcube/roundcubemail:latest
    depends_on:
      - dovecot
      - postfix
    environment:
      - ROUNDCUBEMAIL_DB_TYPE=sqlite
      - ROUNDCUBEMAIL_SKIN=elastic
      - ROUNDCUBEMAIL_DEFAULT_HOST=dovecot
      - ROUNDCUBEMAIL_SMTP_SERVER=postfix
      - ROUNDCUBEMAIL_SMTP_PORT=587
    volumes:
      - roundcube_data:/var/www/html
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - mail_network

  # Alternative: Mailcow (Complete email solution)
  # mailcow:
  #   image: mailcow/mailcow-dockerized:latest
  #   ports:
  #     - "25:25"    # SMTP
  #     - "110:110"  # POP3
  #     - "143:143"  # IMAP
  #     - "465:465"  # SMTPS
  #     - "587:587"  # Submission
  #     - "993:993"  # IMAPS
  #     - "995:995"  # POP3S
  #   volumes:
  #     - mailcow_data:/opt/mailcow-dockerized
  #   environment:
  #     - MAILCOW_HOSTNAME=mail.chatai-talk.ir
  #   restart: unless-stopped

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: /bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'
    depends_on:
      - backend
      - frontend
      - roundcube
    restart: unless-stopped
    networks:
      - default
      - mail_network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

volumes:
  postgres_data:
  redis_data:
  postfix_data:
  dovecot_data:
  mail_data:
  roundcube_data:
  # mailcow_data:

networks:
  mail_network:
    driver: bridge
  default:
    driver: bridge
