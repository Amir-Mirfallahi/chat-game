services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: sh -c "cd backend && uv run manage.py makemigrations && uv run manage.py migrate && uv run gunicorn lle_backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app/backend
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lle_db}
      POSTGRES_USER: ${POSTGRES_USER:-lle_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lle_password}
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-lle_user} -d ${POSTGRES_DB:-lle_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run celery -A lle_backend worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run celery -A lle_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: sh -c "npm i && npm run dev"
    volumes:
      - ./frontend:/app
      - ./frontend/node_modules:/app/node_modules
    expose:
      - 3000
    env_file:
      - ./frontend/.env

  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    command: sh -c "uv run /app/agent/agent.py dev"
    volumes:
      - "./agent/agent.py:/app/agent/agent.py"
      - "./agent/pyproject.toml:/app/agent/pyproject.toml"
    env_file:
      - ./agent/.env

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: /bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'
    depends_on:
      - backend
      - frontend
      - roundcube
    restart: unless-stopped
    networks:
      - default

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

  # Email Services
  mailserver:
    image: mailserver/docker-mailserver:latest
    hostname: mail.chatai-talk.ir # This MUST match your A and MX records
    container_name: mailserver # Makes it easier to run commands
    ports:
      # Standard email ports. Make sure they are open in your Hetzner firewall.
      - "25:25" # SMTP
      - "143:143" # IMAP
      - "465:465" # SMTPS
      - "587:587" # SMTP Submission
      - "993:993" # IMAPS
    volumes:
      - ./mail-data/maildata:/var/mail/
      - ./mail-data/mailstate:/var/mail-state/
      - ./mail-data/mailconfig:/tmp/docker-mailserver/
      - ./certbot/conf:/etc/letsencrypt # Share SSL certs from certbot
    environment:
      - SSL_TYPE=letsencrypt
      - SSL_DOMAIN=chatai-talk.ir # Base domain for certbot
      - PERMIT_DOCKER=network # Allows other containers to relay mail
      - ONE_DIR=1
      - ENABLE_POSTGREY=1
      - ENABLE_SPAMASSASSIN=1
      - SPOOF_PROTECTION=1
      - TZ=Asia/Tehran
    cap_add:
      - NET_ADMIN # Required for Fail2Ban
    restart: unless-stopped
    depends_on:
      - db # Not a hard dependency, but good practice

  roundcube:
    image: roundcube/roundcubemail:latest
    expose:
      - "80" # Exposed only to Nginx
    volumes:
      - ./roundcube/www:/var/www/html
    environment:
      # Use your existing PostgreSQL database
      - ROUNDCUBEMAIL_DB_TYPE=sqlite
      # Connect Roundcube to the mailserver container
      - ROUNDCUBEMAIL_DEFAULT_HOST=mailserver
      - ROUNDCUBEMAIL_SMTP_SERVER=mailserver
      - ROUNDCUBEMAIL_SMTP_PORT=587 # Use the submission port
      - ROUNDCUBEMAIL_PLUGINS=archive,zipdownload
    depends_on:
      - db
      - mailserver
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
